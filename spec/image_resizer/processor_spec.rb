require 'spec_helper'

describe ImageResizer::Processor do

  # IMPORTANT: Enable the flag below to print out the transforms that are generated by calculate_transform
  # as you run the tests. This is great for updating the  expected_results array below if you change the 
  # function and desire different behavior for the inputs, or add other test viewports of POIs.
  actual_printed = false
  actual_results = []

  interest_variants_fractional = [{xf: 0, yf: 0}, {xf: 0, yf: 1}, {xf: 1, yf: 1}, {xf: 1, yf: 0}, {xf: 0.5, yf: 0.5}]
  interest_variants_absolute = [{x: 0, y: 0}, {x: 0, y: 2500}, {x: 3800, y: 2500}, {x: 3800, y: 0}, {x: 3800.0 * 0.5, y: 2500.0 * 0.5}]
  viewport_variants = [{w: 3800, h: 3000}, 
                       {w: 5000, h: 5000}, 
                       {w: 100, h: 100}, 
                       {w: 100, h: 300}, 
                       {w: 300, h: 100}, 
                       {w: 100}, 
                       {h: 100}, 
                       {w: 3000}, 
                       {h: 3000}, 
                       {}]
  
  expected_abs_index = 0
  expected_fraction_index = 0

  expected_results = [{:x=>0.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>0.0, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>0, :scale=>0.02631578947368421},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>3000, :h=>0, :scale=>0.7894736842105263},
                      {:x=>0.0, :y=>0.0, :w=>3000, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>97.36842105263156, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>65.78947368421052, :w=>100, :h=>0, :scale=>0.02631578947368421},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>1973.6842105263158, :w=>3000, :h=>0, :scale=>0.7894736842105263},
                      {:x=>0.0, :y=>0.0, :w=>3000, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>760.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>2600.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>52.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>356.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>97.36842105263156, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>65.78947368421052, :w=>100, :h=>0, :scale=>0.02631578947368421},
                      {:x=>52.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>1973.6842105263158, :w=>3000, :h=>0, :scale=>0.7894736842105263},
                      {:x=>1560.0, :y=>0.0, :w=>3000, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>760.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>2600.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>52.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>356.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>0.0, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>0, :scale=>0.02631578947368421},
                      {:x=>52.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>3000, :h=>0, :scale=>0.7894736842105263},
                      {:x=>1560.0, :y=>0.0, :w=>3000, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>380.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>1300.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>26.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>178.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>48.68421052631578, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>32.89473684210526, :w=>100, :h=>0, :scale=>0.02631578947368421},
                      {:x=>26.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>986.8421052631579, :w=>3000, :h=>0, :scale=>0.7894736842105263},
                      {:x=>780.0, :y=>0.0, :w=>3000, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0}]

  before(:each) do
    @source_jpg_path = SAMPLES_DIR.join('test.jpg') # 3872, 2592
    @source_png_path = SAMPLES_DIR.join('test.png') # 177, 180
    @source_jpg_props = {};
    @source_jpg_props['width'] = 3800
    @source_jpg_props['height'] = 2500
    @source_jpg_props['bands'] = 3

    
    @processor = ImageResizer::Processor.new
  end

  describe "fetch_image_properties" do

    it "should return a hash of properties containing width and height" do
      properties = @processor.fetch_image_properties(@source_jpg_path)
      properties['width'].should == @source_jpg_props['width']
      properties['height'].should == @source_jpg_props['height']
    end

    it "should return a hash of properties containing depth (JPG=3)" do
      properties = @processor.fetch_image_properties(@source_jpg_path)
      properties['bands'].should == 3
    end

    it "should return a hash of properties containing depth (PNG=4)" do
      properties = @processor.fetch_image_properties(@source_png_path)
      properties['bands'].should == 4
    end

    describe "calculate_transform" do

      interest_variants_absolute.each do |ip|
        viewport_variants.each do |viewport|

          it "should produce the correct transform viewport: #{viewport}, point: #{ip}" do
            transform = @processor.calculate_transform(@source_jpg_path, @source_jpg_props, viewport, ip)
            transform.should == expected_results[expected_abs_index]
            expected_abs_index += 1
          end
        
        end
      end

      interest_variants_fractional.each do |ip|
        viewport_variants.each do |viewport|

          it "should produce the correct transform viewport: #{viewport}, point: #{ip}" do
            transform = @processor.calculate_transform(@source_jpg_path, @source_jpg_props, viewport, ip)

            if (actual_printed == true)
              actual_results.push(transform)
              if (actual_results.size() == interest_variants_fractional.size() * viewport_variants.size() - 1)
                print actual_results
              end
            end

            transform.should == expected_results[expected_fraction_index]
            expected_fraction_index += 1
          end

        end
      end

    end
  end
end
