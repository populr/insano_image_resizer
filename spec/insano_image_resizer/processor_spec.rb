require 'spec_helper'

describe InsanoImageResizer::Processor do

  # IMPORTANT: Enable the flag below to print out the transforms that are generated by calculate_transform
  # as you run the tests. This is great for updating the expected_results array below if you change the
  # function and desire different behavior for the inputs, or add other test viewports of POIs.
  actual_printed = true
  actual_results = []

  interest_variants_fractional = [{xf: 0, yf: 0}, {xf: 0, yf: 1}, {xf: 1, yf: 1}, {xf: 1, yf: 0}, {xf: 0.5, yf: 0.5}]
  interest_variants_absolute = [{x: 0, y: 0}, {x: 0, y: 2500}, {x: 3800, y: 2500}, {x: 3800, y: 0}, {x: 3800.0 * 0.5, y: 2500.0 * 0.5}]
  viewport_variants = [{w: 3800, h: 3000},
                       {w: 5000, h: 5000},
                       {w: 100, h: 100},
                       {w: 100, h: 300},
                       {w: 300, h: 100},
                       {w: 100},
                       {h: 100},
                       {w: 3000},
                       {h: 3000},
                       {}]


  expected_results = [{:x=>0.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>0.0, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>97.36842105263156, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>760.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>2600.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>52.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>356.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>97.36842105263156, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.3199999999999932, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.4800000000000182, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>760.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>2600.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>52.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>356.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>0.0, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.3199999999999932, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.4800000000000182, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>380.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>1300.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>26.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>178.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>48.68421052631578, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.1599999999999966, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.2400000000000091, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0}]

  before(:each) do
    @source_jpg_path = SAMPLES_DIR.join('test.jpg').to_s # 3872, 2592
    @source_png_path = SAMPLES_DIR.join('test.png').to_s # 177, 180
    @source_non_transparent_png_path = SAMPLES_DIR.join('non_transparent.png').to_s # 177, 180
    @source_gif_path = SAMPLES_DIR.join('test.gif').to_s
    @source_jpg_width = 3800
    @source_jpg_height = 2500


    @processor = InsanoImageResizer::Processor.new
  end

  describe "#process" do
    before(:each) do
      @processor.stub(:fetch_image_properties).and_return([640, 480, 'GIF16', 'jpg'])
      @processor.stub(:calculate_transform).and_return(:x=>0.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2)
      @processor.stub(:target_jpg_quality).and_return(75)
      @processor.stub(:run_transform)
    end

    it "should get the image properties from fetch_image_properties and pass the results along with parameters into calculate_transform" do
      @processor.should_receive(:fetch_image_properties).with('/path/to/image').and_return([640, 480, 'JPG', 'jpg'])
      @processor.should_receive(:calculate_transform).with('/path/to/image', 640, 480, {w: 5000, h: 5000}, { xf: 0.75, yf: 0.75 })
      @processor.process('/path/to/image', {w: 5000, h: 5000}, { xf: 0.75, yf: 0.75 })
    end

    it "should use the width and height returned from calculate_transform to get the target quality of the processed image" do
      @processor.should_receive(:target_jpg_quality).with(3800, 3000, InsanoImageResizer::Processor::DEFAULT_QUALITY_LIMITS)
      @processor.process('/path/to/image', {w: 5000, h: 5000}, { xf: 0.75, yf: 0.75 })
    end

    context "when the target image output is png" do
      it "should not call target_jpg_quality" do
        @processor.stub(:fetch_image_properties).and_return([640, 480, 'PNG', 'png'])
        @processor.should_not_receive(:target_jpg_quality)
        @processor.process('/path/to/image', {w: 5000, h: 5000}, { xf: 0.75, yf: 0.75 })
      end
    end

    it "should pass the various data from the preceding calculations into run_transform" do
      tempfile = double('tempfile')
      tempfile.stub(:path).and_return('/path/to/new/image')
      Tempfile.stub(:new).and_return(tempfile)
      @processor.should_receive(:run_transform).with('/path/to/image', '/path/to/new/image', { :x=>0.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2 }, 'GIF16', 'jpg', 75)
      @processor.process('/path/to/image', {w: 5000, h: 5000}, { xf: 0.75, yf: 0.75 })
    end
  end


  describe "#fetch_image_properties" do
    context "when the image source is a JPEG" do
      it "should return width and height of the source jpeg, JPEG as the original format, and jpg as the target extension" do
        width, height, original_format, target_extension = @processor.send(:fetch_image_properties, @source_jpg_path)
        width.should == @source_jpg_width
        height.should == @source_jpg_height
        original_format.should == 'JPEG'
        target_extension.should == 'jpg'
      end
    end

    context "when the image source is a PNG" do
      it "should return width and height of the source png, PNG as the original format, and png as the target extension" do
        width, height, original_format, target_extension = @processor.send(:fetch_image_properties, @source_png_path)
        original_format.should == 'PNG'
        target_extension.should == 'png'

        width, height, original_format, target_extension = @processor.send(:fetch_image_properties, @source_non_transparent_png_path)
        original_format.should == 'PNG'
        target_extension.should == 'png'
      end
    end

    context "when the image source is not JPEG or PNG" do
      it "should return width and height of the source image, the original format (eg: GIF16) as the original format, and jpg as the target extension" do
        width, height, original_format, target_extension = @processor.send(:fetch_image_properties, @source_gif_path)
        target_extension.should == 'jpg'
      end
    end
  end


  describe "#target_jpg_quality" do
    before(:each) do
      @limits = { :min_area => { :area => 40000, :quality => 95 },
                  :max_area => { :area => 1000000, :quality => 60 }}
    end

    context "an image that is the min area" do
      it "should get the min_area quality" do
        @processor.target_jpg_quality(200, 200, @limits).should == 95
      end
    end

    context "an image that is the maximum area" do
      it "should get the max_area quality" do
        @processor.target_jpg_quality(1000, 1000, @limits).should == 60
      end
    end

    context "an image that is smaller than the min area" do
      it "should get the min_area quality" do
        @processor.target_jpg_quality(100, 100, @limits).should == 95
      end
    end

    context "an image that is between the min and max areas" do
      it "should be between the min_area and max_area quality specifications" do
        @processor.target_jpg_quality(640, 480, @limits).should be < 95
        @processor.target_jpg_quality(640, 480, @limits).should be > 60
      end
    end

    context "an image that is larger than the maximum area" do
      it "should get the max_area quality" do
        @processor.target_jpg_quality(5000, 5000, @limits).should == 60
      end
    end

  end

  describe "#calculate_transform" do
    it "should produce the correct transform for each viewport" do
      expected_abs_index = 0

      interest_variants_absolute.each do |ip|
        viewport_variants.each do |viewport|
          expected = expected_results[expected_abs_index]
          expected_abs_index += 1

          actual = @processor.send(:calculate_transform, @source_jpg_path, @source_jpg_width, @source_jpg_height, viewport, ip)

          actual[:x].should be_within(0.5).of(expected[:x])
          actual[:y].should be_within(0.5).of(expected[:y])
          actual[:w].should be_within(0.5).of(expected[:w])
          actual[:h].should be_within(0.5).of(expected[:h])
          actual[:scale].should be_within(0.5).of(expected[:scale])
        end
      end
    end

    it "should produce the correct transform for each viewport with fractional variants" do
      expected_fraction_index = 0

      interest_variants_fractional.each do |ip|
        viewport_variants.each do |viewport|
          expected = expected_results[expected_fraction_index]
          expected_fraction_index += 1

          actual = @processor.send(:calculate_transform, @source_jpg_path, @source_jpg_width, @source_jpg_height, viewport, ip)

          actual[:x].should be_within(0.5).of(expected[:x])
          actual[:y].should be_within(0.5).of(expected[:y])
          actual[:w].should be_within(0.5).of(expected[:w])
          actual[:h].should be_within(0.5).of(expected[:h])
          actual[:scale].should be_within(0.5).of(expected[:scale])
        end

      end
    end

  end
end
