require 'spec_helper'

describe InsanoImageResizer::Processor do

  # IMPORTANT: Enable the flag below to print out the transforms that are generated by calculate_transform
  # as you run the tests. This is great for updating the expected_results array below if you change the
  # function and desire different behavior for the inputs, or add other test viewports of POIs.
  actual_printed = true
  actual_results = []

  interest_variants_fractional = [{xf: 0, yf: 0}, {xf: 0, yf: 1}, {xf: 1, yf: 1}, {xf: 1, yf: 0}, {xf: 0.5, yf: 0.5}]
  interest_variants_absolute = [{x: 0, y: 0}, {x: 0, y: 2500}, {x: 3800, y: 2500}, {x: 3800, y: 0}, {x: 3800.0 * 0.5, y: 2500.0 * 0.5}]
  viewport_variants = [{w: 3800, h: 3000},
                       {w: 5000, h: 5000},
                       {w: 100, h: 100},
                       {w: 100, h: 300},
                       {w: 300, h: 100},
                       {w: 100},
                       {h: 100},
                       {w: 3000},
                       {h: 3000},
                       {}]


  expected_results = [{:x=>0.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>0.0, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>97.36842105263156, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.0, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.0, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>760.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>2600.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>52.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>356.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>97.36842105263156, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.3199999999999932, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.4800000000000182, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>760.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>2600.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>52.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>356.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>0.0, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.3199999999999932, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.4800000000000182, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0},
                      {:x=>380.0, :y=>0.0, :w=>3800, :h=>3000, :scale=>1.2},
                      {:x=>1300.0, :y=>0.0, :w=>5000, :h=>5000, :scale=>2.0},
                      {:x=>26.0, :y=>0.0, :w=>100, :h=>100, :scale=>0.04},
                      {:x=>178.0, :y=>0.0, :w=>100, :h=>300, :scale=>0.12},
                      {:x=>0.0, :y=>48.68421052631578, :w=>300, :h=>100, :scale=>0.07894736842105263},
                      {:x=>0.1599999999999966, :y=>0.0, :w=>100, :h=>66, :scale=>0.0264},
                      {:x=>0.0, :y=>0.0, :w=>152, :h=>100, :scale=>0.04},
                      {:x=>0.2400000000000091, :y=>0.0, :w=>3000, :h=>1974, :scale=>0.7896},
                      {:x=>0.0, :y=>0.0, :w=>4560, :h=>3000, :scale=>1.2},
                      {:x=>0.0, :y=>0.0, :w=>3800, :h=>2500, :scale=>1.0}]

  before(:each) do
    @source_jpg_path = SAMPLES_DIR.join('test.jpg').to_s # 3872, 2592
    @source_png_path = SAMPLES_DIR.join('test.png').to_s # 177, 180
    @source_non_transparent_png_path = SAMPLES_DIR.join('non_transparent.png').to_s # 177, 180
    @source_gif_path = SAMPLES_DIR.join('test.gif').to_s
    @source_jpg_width = 3800
    @source_jpg_height = 2500


    @processor = InsanoImageResizer::Processor.new
  end

  describe "fetch_image_properties" do
    it "should return width, height, original_format, and target extension" do
      width, height, original_format, target_extension = @processor.send(:fetch_image_properties, @source_jpg_path)
      width.should == @source_jpg_width
      height.should == @source_jpg_height
      original_format.should == 'JPEG'
      target_extension.should == 'jpg'

      width, height, original_format, target_extension = @processor.send(:fetch_image_properties, @source_png_path)
      original_format.should == 'PNG'
      target_extension.should == 'png'

      width, height, original_format, target_extension = @processor.send(:fetch_image_properties, @source_non_transparent_png_path)
      original_format.should == 'PNG'
      target_extension.should == 'png'
    end

    it "should return an extension of jpg for all non-png formats" do
      width, height, original_format, target_extension = @processor.send(:fetch_image_properties, @source_gif_path)
      target_extension.should == 'jpg'
    end
  end

  describe "calculate_transform" do
    it "should produce the correct transform for each viewport" do
      expected_abs_index = 0

      interest_variants_absolute.each do |ip|
        viewport_variants.each do |viewport|
          expected = expected_results[expected_abs_index]
          expected_abs_index += 1

          actual = @processor.send(:calculate_transform, @source_jpg_path, @source_jpg_width, @source_jpg_height, viewport, ip)

          actual[:x].should be_within(0.5).of(expected[:x])
          actual[:y].should be_within(0.5).of(expected[:y])
          actual[:w].should be_within(0.5).of(expected[:w])
          actual[:h].should be_within(0.5).of(expected[:h])
          actual[:scale].should be_within(0.5).of(expected[:scale])
        end
      end
    end

    it "should produce the correct transform for each viewport with fractional variants" do
      expected_fraction_index = 0

      interest_variants_fractional.each do |ip|
        viewport_variants.each do |viewport|
          expected = expected_results[expected_fraction_index]
          expected_fraction_index += 1

          actual = @processor.send(:calculate_transform, @source_jpg_path, @source_jpg_width, @source_jpg_height, viewport, ip)

          actual[:x].should be_within(0.5).of(expected[:x])
          actual[:y].should be_within(0.5).of(expected[:y])
          actual[:w].should be_within(0.5).of(expected[:w])
          actual[:h].should be_within(0.5).of(expected[:h])
          actual[:scale].should be_within(0.5).of(expected[:scale])
        end

      end
    end

  end
end
